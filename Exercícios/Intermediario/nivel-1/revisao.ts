/* üß™ Exerc√≠cio 1 ‚Äì Filtrar produtos dispon√≠veis
Enunciado:
Crie uma interface Produto com:

nome (string)

preco (number)

disponivel (boolean)

Crie um array com pelo menos 4 produtos.

Crie uma fun√ß√£o filtrarDisponiveis que:

recebe um array de produtos

retorna apenas os produtos com disponivel: true
 */

interface Produto01 {
  name: string;
  price: number;
  disponivel: boolean;
}

const produtos: Produto01[] = [
  { name: "caneta", price: 1.5, disponivel: true },
  { name: "lapis", price: 0.5, disponivel: true },
  { name: "estojo", price: 5, disponivel: false },
  { name: "borracha", price: 2.3, disponivel: true },
];

function filtrarDisponiveis(lista: Produto01[]) {
  return lista.filter((produtos) => produtos.disponivel);
}

const emEstoque = filtrarDisponiveis(produtos);
console.log(emEstoque);

/* Exerc√≠cio 2 ‚Äì Calcular pre√ßo com imposto
  üìã Regras:
  Use a mesma interface Produto e o array emEstoque que voc√™ j√° criou.
  
  Crie uma fun√ß√£o chamada aplicarImposto que:
  
  Recebe um array de Produto
  
  Retorna um array de strings com a seguinte estrutura:
  */

function aplicarImposto(lista: Produto01[]) {
  return lista.map((emEstoque) => {
    const result = emEstoque.price * 1.1;
    return `${emEstoque.name} - ${result.toFixed(2)}`;
  });
}

const juros = aplicarImposto(emEstoque);
console.log(juros);

/* üß™ Exerc√≠cio 3 ‚Äì Relat√≥rio de Produtos
  üìã Enunciado:
  Crie uma fun√ß√£o chamada exibirRelatorioDeProdutos que:
  
  Recebe um array de produtos (como o produtos que voc√™ j√° criou antes).
  
  Para cada produto, exibe no console a seguinte mensagem formatada:

  Produto: Caneta | Pre√ßo: R$ 1.50 | Dispon√≠vel: Sim
  üß† Regras:
  Utilize .forEach() para iterar.
  
  O campo disponivel: true deve aparecer como "Sim" e false como "N√£o".
  
  Mantenha a formata√ß√£o do pre√ßo com duas casas decimais. */

function exibirRelatorioDeProdutos(lista: Produto01[]) {
  lista.forEach((produtos) => {
    const estoque = produtos.disponivel ? "sim" : "n√£o";
    console.log(
      `Produto: ${produtos.name} | Pre√ßo: ${produtos.price} | Disponivel: ${estoque}`
    );
  });
}

exibirRelatorioDeProdutos(produtos);

/* üöÄ Retomando com o Exerc√≠cio 5 ‚Äì M√©dia dos produtos dispon√≠veis (n√≠vel intermedi√°rio)
üìã Enunciado (relembrando):
Crie uma fun√ß√£o calcularMediaDisponiveis que:
Filtra os produtos dispon√≠veis no estoque.
Soma os pre√ßos desses produtos.
Calcula a m√©dia dos pre√ßos.
Retorna o resultado com duas casas decimais. */

function calcularMediaDisponiveis(lista: Produto01[]) {
  const filtro = lista.filter((itens) => (itens.disponivel ? true : false));
  const soma = filtro.reduce((prevVal, itens) => prevVal + itens.price, 0);
  const media = soma / filtro.length;
  const result = media.toFixed(2);

  return `media em estoque √© ${result}`;
}

const total = calcularMediaDisponiveis(produtos);
console.log(total);

/*
üß† Exerc√≠cio 6 ‚Äì Valor total dos produtos dispon√≠veis + Mensagem formatada
üü® Enunciado:
Crie uma fun√ß√£o chamada gerarResumoDeEstoque que:
Filtra apenas os produtos dispon√≠veis.
Soma o valor total dos produtos dispon√≠veis usando .reduce().
Retorna uma mensagem formatada, assim:

"Total em estoque: R$ 4.30 para 3 itens dispon√≠veis."

*/

function gerarResumoDeEstoque(lista: Produto01[]) {
  const produtoEmEstoque = lista.filter((estoque) =>
    estoque.disponivel ? true : false
  );
  const valorTotal = produtoEmEstoque.reduce(
    (prevVal, estoque) => prevVal + estoque.price,
    0
  );

  return `Total em estoque; R$ ${valorTotal.toFixed(2)} para ${
    produtoEmEstoque.length
  } itens dispon√≠veis`;
}

console.log(gerarResumoDeEstoque(produtos));
